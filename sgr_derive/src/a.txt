
我定义了一个trait:
#[async_trait]
pub trait ServiceRegistry {
    async fn find(&self, service_name: String, id: String) -> Result<ServiceEntry>;
    async fn lookup(&self, service_name: String) -> Result<Vec<ServiceEntry>>;
    async fn watch(&self, service_name: String) -> ResultReceiver<Vec<ServiceEntry>>;
}

这个triat有多个实现: contrib::Files,contrib::Etcd

我想实现一个宏:ServiceRegistryAgent，实现如下这个效果，定义一个如下enum:

#[derive(ServiceRegistryAgent)]
pub enum MyServiceRegistry {
    #[driver(name = "files")]
    Files(contrib::Files),
    #[driver(name = "etcd")]
    Files(contrib::Etcd),
}

这个宏会自动生成如下代码:

impl MyServiceRegistry {
    pub fn new(driver: String) -> Self {
        match driver.as_str() {
            "files" => MyServiceRegistry::Files(contrib::Files::new()),
            "etcd" => MyServiceRegistry::Etcd(contrib::Etcd::new()),
        }
    }
}

impl ServiceRegistry for MyServiceRegistry {
    async fn find(&self, service_name: String, id: String) -> Result<ServiceEntry> {
        match self {
            MyServiceRegistry::Files(files) => files.find(service_name, id).await,
            MyServiceRegistry::Etcd(etcd) => etcd.find(service_name, id).await,
        }
    }
    async fn lookup(&self, service_name: String) -> Result<Vec<ServiceEntry>> {
        match self {
            MyServiceRegistry::Files(files) => files.lookup(service_name).await,
            MyServiceRegistry::Etcd(etcd) => etcd.lookup(service_name).await,
        }
    }
    async fn watch(&self, service_name: String) -> ResultReceiver<Vec<ServiceEntry>> {
        match self {
            MyServiceRegistry::Files(files) => files.watch(service_name).await,
            MyServiceRegistry::Etcd(etcd) => etcd.watch(service_name).await,
        }
    }
}

请帮忙实现
